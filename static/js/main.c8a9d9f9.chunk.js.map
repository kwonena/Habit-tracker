{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","class","Component","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Navbar","tatalCount","PureComponent","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8a9d9f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Habit extends Component {\r\n  // Habit 컴포넌트는 자체 내 state는 존재하지 않고,\r\n  // 외부에서 props로 전달 받은 habit 오브젝트의 데이터를 보여주기만 함\r\n  handleIncrement = () => {\r\n    this.props.onIncrement(this.props.habit);\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit);\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit);\r\n  };\r\n\r\n  render() {\r\n    const { name, count } = this.props.habit;\r\n    return (\r\n      <li className=\"habit\">\r\n        <span className=\"habit-name\">{name}</span>\r\n        <span className=\"habit-count\">{count}</span>\r\n        <button\r\n          className=\"habit-button habit-increase\"\r\n          onClick={this.handleIncrement}\r\n        >\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-decrease\"\r\n          onClick={this.handleDecrement}\r\n        >\r\n          <i className=\"fas fa-minus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-delete\"\r\n          onClick={this.handleDelete}\r\n        >\r\n          <i class=\"fas fa-trash-alt\"></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habit;\r\n","import React, { memo } from \"react\";\r\n// PureComponent : 최상위 데이터가 변하지 않으면, rende함수 실행X (re-rendering)\r\n\r\n// memo라는 함수 안에 function component를 전달\r\n// props가 변경되지 않으면 함수 호출X\r\nconst HabitAddForm = memo((props) => {\r\n  const formRef = React.createRef();\r\n  const inputRef = React.createRef();\r\n\r\n  // 함수형 component는 this를 호출하지 않아도 됨\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    const name = inputRef.current.value;\r\n    name && props.onAdd(name);\r\n    // this.inputRef.current.value = \"\";\r\n    formRef.current.reset();\r\n  };\r\n  return (\r\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        className=\"add-input\"\r\n        placeholder=\"Habit\"\r\n      />\r\n      <button className=\"add-button\">Add</button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default HabitAddForm;","import React, { Component } from \"react\";\r\nimport Habit from \"./habit\";\r\nimport HabitAddForm from \"./habitAddForm\";\r\n\r\nclass Habits extends Component {\r\n  handleIncrement = (habit) => {\r\n    this.props.onIncrement(habit);\r\n  };\r\n\r\n  handleDecrement = (habit) => {\r\n    this.props.onDecrement(habit);\r\n  };\r\n\r\n  handleDelete = (habit) => {\r\n    this.props.onDelete(habit);\r\n  };\r\n\r\n  handleAdd = (name) => {\r\n    this.props.onAdd(name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <HabitAddForm onAdd={this.handleAdd} />\r\n        <ul>\r\n          {this.props.habits.map((habit) => (\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              onIncrement={this.handleIncrement}\r\n              onDecrement={this.handleDecrement}\r\n              onDelete={this.handleDelete}\r\n            />\r\n            // Habit 컴포넌트에게 prop 이름으로 전달한 콜백함수를 호출하라고 함\r\n          ))}\r\n        </ul>\r\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\r\n          Reset All\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habits;\r\n\r\n// onDelete={this.handleDelete}로 함수를 계속 정의하는 것이 번거롭다면,\r\n// onDelete={(habit) => this.props.handleDelete(habit)}\r\n// 이렇게 바로 작성해도 됨(하면 안되는 경우도 있음)\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <i className=\"navbar-logo fas fa-leaf\"></i>\r\n        <span className=\"navbar-name\">Habit Tracker</span>\r\n        <span className=\"navbar-count\">{this.props.tatalCount}</span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  // 데이터를 가지고 있는 곳에서 처리 해주는 것이 가장 좋음\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  // this.handleIncrement가 habit 인자로 전달됨\n  // 리액트는 state를 직접 수정하는 것이 안 좋음\n  handleIncrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n    this.setState({ habits }); // key와 value의 값이 같다면 하나만 적어줘도 됨\n  };\n\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    // filter() -> 특정한 곳을 제외 또는 포함할 수 있게 하는 API\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    // 새로운 데이터를 만들때 map을 이용\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) { // 0이 아닐때만 업데이트\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          tatalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}